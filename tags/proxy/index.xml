<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Proxy on 小熊猫快站起来</title>
    <link>https://suikaremilia.github.io/tags/proxy/</link>
    <description>Recent content in Proxy on 小熊猫快站起来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Jul 2020 14:15:12 +0000</lastBuildDate><atom:link href="https://suikaremilia.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Set up proxy for podman</title>
      <link>https://suikaremilia.github.io/post/set-up-proxy-for-podman/</link>
      <pubDate>Mon, 20 Jul 2020 14:15:12 +0000</pubDate>
      
      <guid>https://suikaremilia.github.io/post/set-up-proxy-for-podman/</guid>
      <description>背景如题，方案在/etc/profile.d/下配置：
# cat /etc/profile.d/http_proxy.sh export HTTP_PROXY=http://192.168.0.1:8080 export HTTPS_PROXY=http://192.168.0.1:8080 或直接export，但前者对ansible也生效，后者只能是该终端的用户
貌似都是废话，其他程序配置Proxy，用常规的用export命令配置环境变量不生效的时候，也可以试试这样……</description>
    </item>
    
    <item>
      <title>Caddy翻墙</title>
      <link>https://suikaremilia.github.io/post/caddy-fucke-gfw/</link>
      <pubDate>Mon, 06 Apr 2020 10:09:28 +0000</pubDate>
      
      <guid>https://suikaremilia.github.io/post/caddy-fucke-gfw/</guid>
      <description>Caddy有个模块很好用，经过简单的配置即可以https或http2的方式跨越防火墙，不需要单独申请证书同时还有正常网站做伪装，配合浏览器switch omega插件，方便快捷的访问被墙的资源。
安装： curl https://getcaddy.com | bash -s personal http.forwardproxy 配置一个正常网站： 创建文件并赋权等杂项：
setcap &amp;#39;cap_net_bind_service=+ep&amp;#39; /usr/local/bin/caddy useradd -r -d /var/www -M -s /sbin/nologin caddy chown -R caddy:caddy /var/www mkdir /etc/caddy chown -R root:caddy /etc/caddy touch /etc/caddy/Caddyfile chown caddy:caddy /etc/caddy/Caddyfile mkdir /var/log/caddy chown caddy:caddy /var/log/caddy/ mkdir -p /var/www/xxx.yyy.zzz chown -R caddy:caddy /var/www mkdir -p /etc/ssl/caddy chown -R caddy:caddy /etc/ssl/caddy 编辑配置文件：
vim /etc/caddy/Caddyfile https://xxx.yyy.zzz { //xxx.yyy.zzz为可以解析到本机的域名，下同 log /var/log/caddy/xxx.log errors /var/log/caddy/xxx.error root /var/www/xxx.yyy.zzz gzip tls &amp;lt;xxx@xxxxx.</description>
    </item>
    
    <item>
      <title>解决UWP应用无法联网的三种方法</title>
      <link>https://suikaremilia.github.io/post/uwp-no-internet/</link>
      <pubDate>Thu, 12 Mar 2020 14:07:17 +0000</pubDate>
      
      <guid>https://suikaremilia.github.io/post/uwp-no-internet/</guid>
      <description>surface Pro 6又坏了，微软的硬件好垃圾，一年多坏了3次，再不会买了，影响工作效率。每次送修的结果就是所有东西都要重配一遍，这次是换机，更彻底一点。然后，又遇到了当初第一次用surface的时候遇到的问题——UWP应用联网。于是把备份的一篇文字直接拿来解决这个问题，再发一遍方便以后找。
从Arch到Win10各种不适应，最近这种不适应在一个始料未及的事情上表现的尤为明显——只要开了全局代理，微软自家的UWP程序就无法联网了。
对此，在下也是服气。
然而，发现问题不解决不是吾辈的作风，于是开始找各种解决方案，顺带了解了一下UWP。
这玩意出来也好几年了，一直不温不火的，以至于我从来没有注意到还有这么个玩意。据说所有UWP应用均运行在被称为App Container的虚拟沙箱环境中，其安全性胜于传统的EXE应用。但问题也出在这里，安全的同时它阻止了网络流量发送到本机（即loopback），即阻止了UWP应用访问 localhost。没有访问回环地址的权限，也意味着即便系统设置中启用了本地代理，UWP应用也无法访问本地代理服务器。
按照官方的解决方案，貌似可以用CheckNetIsolation命令来解决这个问题，MSDN轻描淡写的写着命令：
checknetisolation loopbackexempt -a -n= UWP应用容器名 checknetisolation loopbackexempt -a -p= UWP应用SID 可是谁告诉我UWP的SID去哪里找？UWP的应用容器名称又是啥？
有一种找SID的方法，通过注册表获取：
win+r的运行里输入Regedit打开注册表编辑器，然后定位到
HKEY_CURRENT_USERSoftwareClassesLocal Settings Software MicrosoftWindows CurrentVersion App Container Mappings 接着在左边的注册表项中找到你想解除网络隔离的应用，右边的 DisplayName 就是应用名称，而左边那一大串字符就是应用的SID值了。
SID值是人类可以理解的么？对此我可以骂人么？这是人干的事？我不能骂人么？那我还有什么话好说。
这方法还是放弃的好！
官方的解决方案如此复杂，按照问题发生后最简单的思路去解决，那就是关闭代理。
这简单粗暴的方法确实可行，唯一的问题是关闭代理这事在国内是我不能接受的。
接着搜索，互联网给出的答案是网络调试工具Fiddler，然后左上角的WinConfig按钮，排除不要的UWP应用。
可是，Fiddler这工具用来干这个岂不是太大材小用了？
最终，我找到了这个——Windows-Loopback-Exemption-Manager
Github上的项目，看来遭这问题困扰的人好多啊
https://github.com/tiagonmas/Windows-Loopback-Exemption-Manager
好了，这玩意跟Fiddler用法差不多，功能更单一，仅此而已。
哦，这东西还有一个坑，就是邮件，用这种方法邮件还是没办法添加Gmail不知道是为啥。
以上就是三种解决方案，其实只能算两种:
如果想简单粗暴，那么关闭代理是最直接的,这简直不能算解决方案；
不然，就Fiddle或是Windows-Loopback-Exemption-Manager这两者虽然有坑都还可以接受；
我想没有人愿意手动去一条条命令敲吧，光是找SID的工作就是非人类的。</description>
    </item>
    
  </channel>
</rss>
